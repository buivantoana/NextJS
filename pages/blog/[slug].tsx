import { useRouter } from "next/router";
import React from "react";
import axios from "axios";
import { GetStaticPropsContext } from "next";
import { Main } from "@/combonet/main";
import { Box, Typography } from "@mui/material";
import Container from "@mui/material/Container";
import { Seo } from "@/combonet/seo/seo";

const PostComponent = ({ user }: any) => {
  return (
    <Main>
      <Box>
        <Seo
          title={user[0].title}
          description={user[0].description}
          url={`https://next-7y39ck2kh-toanbui219-gmailcom.vercel.app/blog/${user[0].slug}`}
          thumbnailUrl='https://tse2.mm.bing.net/th?id=OIP.KhEi6z8wYQZVa0IFYmaUXAHaHa&pid=Api&P=0'
        />
        <Container>
          <Box my='50px'>
            <Typography variant='h5' fontWeight='bold'>
              {user[0].title}
            </Typography>
          </Box>
          <Box
            className='markDow'
            dangerouslySetInnerHTML={{ __html: user[0].markdowHtml }}></Box>
        </Container>
      </Box>
    </Main>
  );
};

PostComponent.layout = Main;
export default PostComponent;
export async function getStaticPaths() {
  const response: any = [
    {
      slug: "bi-kip-phong-van-reactjs-thanh-cong",
      title: "Bí kíp cho buổi phỏng vấn ReactJS thành công 🎉",
      author: "Hậu Nguyễn",
      author_title: "Senior Software Engineer at fram^",
      author_url: " https://github.com/paulnguyen-mn",
      author_image_url:
        "https://avatars3.githubusercontent.com/u/31444102?s=400&u=c545a527aa31843e1361462e410c0f51863e8e26&v=4",
      image:
        "https://images.unsplash.com/photo-1549923746-c502d488b3ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1351&q=80",
      tags: "reactjs, phỏng vấn reactjs",
      markdowHtml: `<p>Khi nhắc tới git có khá là nhiều lệnh khác nhau, tuy nhiên trong thực tế sử dụng trong dự án thì có những lệnh nào được sử dụng nhiều nhất? 🤔 Hãy cùng mình khám phá qua bài blog này nhé! 😉</p><!-- truncate--><h2 id="0-nh-n-task-v-d-y-task-c-id-l-123">0. Nhận task, ví dụ ở đây task có id là 123</h2><ul><li>Tí nữa, đọc thấy tạo nhánh có số 123 thì các bạn hiểu ngầm nó chính là <code>taskId</code> nhen.</li><li>Ví dụ team mình dev trên nhánh <code>develop</code>.</li></ul><h2 id="1-l-y-code-m-i-nh-t-tr-n-branch-develop">1. Lấy code mới nhất trên branch develop</h2><pre><code class="lang-sh">git checkout develop # switch sang nhánh developgit pull # lấy <span class="hljs-keyword">code</span> mới nhất về</code></pre><h2 id="2-l-m-task-tr-c-ti-p-tr-n-nh-nh-develop">2. Làm task trực tiếp trên nhánh develop</h2><p>CODING CHANGES 😎<br />Sau khi code xong, nhờ review lại những thay đổi của mình, review cẩn thận, từ từ.<br />Review về coding convention.<br />Review về console log đã xoá chưa?<br />Review về imports (có dư thừa gì ko?)<br />Review về eslints <br />Review xem chỗ nào logic phức tạp nên add thêm comment vào.<br />Review xem chỗ nào code nhiều if/else quá thì refactor lại.<br />...<br />Review bằng VSCode hen, cho nó dễ nhìn, còn bạn muốn cool ngầu thì cứ git diff và check nhé! 😎<br />Hãy tập thói quen review code của bản thân cẩn thận trước khi đưa cho lead review nhé! 😉</p><h2 id="3-chu-n-b-t-o-pull-request-pr-">3. Chuẩn bị tạo Pull Request (PR)</h2><blockquote><p>Sau khi đã code xong, giờ chuẩn bị tạo PR<br />Nhưng có thể trong lúc mình làm, ai đó đã update thêm lên nhánh develop rồi.<br />Nên mình phải lấy code mới nhất trên nhánh develop rồi mới apply cái changes của mình.</p></blockquote><pre><code class="lang-sh">git add . # chấp nhậ<span class="hljs-built_in">n</span> <span class="hljs-built_in">t</span>ấ<span class="hljs-built_in">t</span> cả changesgit stash # save <span class="hljs-built_in">t</span>ấ<span class="hljs-built_in">t</span> cả <span class="hljs-built_in">code</span> changes vào stash (kiểu <span class="hljs-built_in">n</span>ơi giữ <span class="hljs-built_in">code</span> <span class="hljs-built_in">t</span>ạm)git pull  # lấy <span class="hljs-built_in">code</span> mới nhấ<span class="hljs-built_in">t</span> về</code></pre><h2 id="4-t-o-nh-nh-cho-code-changes-c-a-m-nh">4. Tạo nhánh cho code changes của mình</h2><pre><code class="lang-sh">git checkout -b feature/<span class="hljs-number">123</span>-<span class="hljs-keyword">add</span><span class="bash">-address-ui</span></code></pre><h2 id="5-l-y-code-t-trong-stash-ra-h-i-n-y-l-u-b-ng-git-stash-">5. Lấy code từ trong stash ra (hùi nảy lưu bằng git stash)</h2><pre><code class="lang-sh">git stash <span class="hljs-keyword">pop</span></code></pre><blockquote><p>OPTIONAL: resolve conflicts nếu có, nhớ test lại để đảm bảo code còn chạy ngon 😅</p></blockquote><h2 id="6-t-o-commit-vi-t-commit-message">6. Tạo commit, viết commit message</h2><pre><code class="lang-sh">git status # xem các files thay đổ<span class="hljs-built_in">i</span>git add . # chấp nhậ<span class="hljs-keyword">n</span> tất cả thay đổ<span class="hljs-built_in">i</span>git commit -<span class="hljs-keyword">m</span> "[123] Add address ui- <span class="hljs-keyword">More</span> details <span class="hljs-keyword">about</span> your <span class="hljs-keyword">PR</span>- <span class="hljs-keyword">Keep</span> it short and descriptive"</code></pre><blockquote><p>📝Lưu ý chỗ chữ màu vàng<br/> - Dòng đầu tiên là title<br/> - Dòng thứ 2 là empty ( BẮT BUỘC ) <br/> - Dòng thứ 3 trở đi là dòng mô tả thêm về Pull Request của mình.<br/> Convention này nó giúp bạn tự động điền title, description vào ô tương ứng trên Github, Gitlab, Bitbucket, ...</p></blockquote><h2 id="7-push-code-l-n-remote-repository-github-gitlab-bitbucket-">7. Push code lên remote repository (Github, Gitlab, Bitbucket, ...)</h2><pre><code class="lang-sh">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> <span class="hljs-built_in">feature</span>/<span class="hljs-number">123</span>-address-ui</code></pre><h2 id="cu-i-c-ng-l-n-remote-repo-t-o-pr-mr-v-o-nh-nh-develop-xong-nh-lead-review-th-i-hehe">Cuối cùng, lên remote repo tạo PR/MR vào nhánh develop. Xong nhờ lead review thôi hehe</h2><p><strong>📝LƯU Ý</strong></p><ul><li>Tuỳ dự án sẽ có quy định tên nhánh khác nhau, nhớ follow theo team.</li><li>Làm việc trên nhánh nào cũng tuỳ team, <code>ko phải</code> lúc nào cũng là <code>develop</code>.</li><li><code>Không phải</code> ai cũng apply cái process này giống mình, <code>mỗi người mỗi kiểu</code>.</li><li>Ở trên là process, mình đi làm thấy nó tốt và đã apply suốt thời gian qua, thấy hiệu quả nên chia sẻ lại cho mọi người nè, mọi người đọc tham khảo, thấy hay thì có thể vận dụng nhen 😉</li></ul><p>CHÚC CẢ NHÀ SỨC KHOẺ VÀ HỌC TẬP TỐT NHÉ! ❤️</p>`,
      description:
        "Amet minim mollit non deserunt ullamco est sit aliqua dolor do amet sint. Velit officia consequat duis enim velit mollit. Exercitation veniam consequat sunt nostrud amet.",
    },
    {
      slug: "lo-trinh-hoc-reactjs-co-ban-2020",
      title: "Lộ trình học ReactJS cơ bản cho người mới bắt đầu 2020 🥰",
      author: "Hậu Nguyễn",
      author_title: "Senior Software Engineer at fram^",
      author_url: " https://github.com/paulnguyen-mn",
      author_image_url:
        "https://avatars3.githubusercontent.com/u/31444102?s=400&u=c545a527aa31843e1361462e410c0f51863e8e26&v=4",
      image:
        "https://images.unsplash.com/photo-1549923746-c502d488b3ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1351&q=80",
      tags: "reactjs, phỏng vấn reactjs",
      markdowHtml: `<p>Rất nhiều bạn thắc mắc không biết là học ReactJS là học những gì? Rồi bắt đầu từ đâu? Sử dụng những package, thư viện nào, ... Để giúp các bạn trả lời câu hỏi đó, mình có tổng hợp lại một số nguồn tham khảo cũng như kinh nghiệm cá nhân của mình để viết ra lộ trình học ReactJS này, hi vọng giúp ích được cho các bạn. 😉</p> <!-- truncate--> <ul> <li><strong>Đôi tượng</strong>: mới bắt đầu học ReactJS mà không biết học những gì.</li> <li><strong>Yêu cầu kiến thức</strong>: <ul> <li>Javascript cơ bản: <a href="https://javascript.info/">https://javascript.info/</a></li> <li>ES6 syntax: <a href="http://es6-features.org/#Constants">http://es6-features.org/#Constants</a></li> <li>Git cơ bản: Học cách quản lý source code</li> <li>NPM (Node Package Manager): Tìm hiểu xem đây là gì?</li> <li>Tiếng Anh (vì tài liệu đa số là Tiếng Anh)</li> </ul> </li> </ul> <p>Nếu như mọi người chưa biết Javascript là gì, thì mình khuyên các bạn nên học JS trước rồi hẵn sang ReactJS nhé, kẻo ngợp nè! 😉</p> <h2 id="m-ng-ki-n-th-c-c-b-n-b-t-bu-c-">Mảng kiến thức cơ bản (BẮT BUỘC)</h2> <p><strong>MỘT VÀI NOTES:</strong></p> <ul> <li>ReactJS là <code>thư viện</code> để xây dựng UI component, chứ không phải <code>framework</code> nha. </li> <li><code>Lib (thư viện)</code> vs <code>framework</code> khác nhau cái gì? Các bạn chịu khó google để biết thêm nha.</li> <li>Version hiện tại của ReactJS là bao nhiêu? </li> <li>ReactJS là của ai hay tổ chức nào?</li> <li>Tại sao phải cần ReactJS, sao không viết thuần javascript? </li> <li>Sẽ hơi khó hiểu khi mới đầu tiếp cận ReactJS, nhưng không sao, cứ đi tiếp nha hehee</li> </ul> <h3 id="0-setup-m-i-tr-ng-l-m-vi-c">0. Setup môi trường làm việc</h3> <p><strong>Bạn cần gì để bắt đầu code được ReactJS:</strong></p> <ul> <li>Cài đặt <a href="https://nodejs.org/en/">NodeJS</a> (runtime của javascript)</li> <li>Code editor: dùng <a href="https://code.visualstudio.com/">VSCode</a></li> <li>Cài đặt một vài extension hữu ích của VSCode: (OPTIONAL)<ul> <li>Live Server</li> <li>Material Theme Icons</li> <li>Material Theme</li> <li>Sử dụng Fira Code font</li> <li>ReactJS code snippets</li> <li>ESLint</li> <li>Babel Javascript</li> <li>Bracket Pair Colorizer:</li> </ul> </li> <li>Bắt đầu tạo project:<ul> <li>Dùng tool <code>Create React App</code> để tạo một ReactJS project mẫu: <a href="https://create-react-app.dev/docs/getting-started/">https://create-react-app.dev/docs/getting-started/</a></li> </ul> </li> </ul> <p>Tada xong tới đây là bạn phải chạy lên được cái website đơn giản của ReactJS rồi đó. <br/> Giờ học code ReactJS thôi hehe 😎</p> <h3 id="1-ki-n-th-c-n-n-t-ng">1. Kiến thức nền tảng</h3> <ul> <li>Đi hết phần Main Concepts của ReactJS, bắt đầu ở đây: <a href="https://reactjs.org/docs/hello-world.html">https://reactjs.org/docs/hello-world.html</a></li> </ul> <blockquote> <p><strong>Lưu ý</strong>: </p> <ul> <li>Không vội vàng, đừng đi nhanh mà không hiểu gì hết.</li> <li>Đi từng mục một, đi chậm, học tới đâu, lấy code bỏ vào VSCode chạy lên thử coi nó ra như thế nào để hiêu nó.</li> <li>Nếu gặp khó khăn, không hiểu topic nào thì tìm thêm blog, videos về chủ đề đó mà coi thêm.</li> </ul> </blockquote> <ul> <li>Sau khi đi hết phần kiến thức này, hãy tự làm một website đơn giản mà bạn thích: <ul> <li><code>Todo App</code>: Thêm, Xoá, Sửa và hiển thị ra danh sách TODOS</li> <li><code>Simple Cart</code>: Hiển thị danh sách sản phẩm, thêm vào giỏ hàng và tính tiền.</li> <li>... </li> </ul> </li> </ul> <blockquote> <p>Mục đích cho phần này để đảm bảo các bạn hiểu và vận dụng được kiến thức của ReactJS.</p> </blockquote> <ul> <li>Thêm vào đó, các bạn có thể tham khảo thêm các videos mình làm cho ReactJS cơ bản để nắm rõ hơn một số chủ đề mình trao đổi: <a href="https://www.youtube.com/playlist?list=PLeS7aZkL6GOsPo-bFZSNuu4VhYicRjlAq">https://www.youtube.com/playlist?list=PLeS7aZkL6GOsPo-bFZSNuu4VhYicRjlAq</a></li> </ul> <h3 id="2-type-checking">2. Type checking</h3> <ul> <li>Đây là một nội dung OPTIONAL. Không có Type Checking, code của bạn vẫn chạy được bình thường.</li> <li>Thỉnh thoảng bạn thấy code như vầy: </li> </ul> <pre><code class="lang-js"><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">'prop-types'</span>; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Item</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-comment">// ...</span> } Item.propTypes = { <span class="hljs-attr">data</span>: PropTypes.object.isRequired, <span class="hljs-attr">isSpecial</span>: PropTypes.bool, } <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Item; </code></pre> <ul> <li>Để ý cái phần <code>Item.propTypes</code>, khúc này dù có hay không thì code của bạn vẫn chạy.</li> </ul> <p><strong>Vậy Type Checking có tác dụng gì mà mình phải consider thêm nó vào?</strong></p> <ul> <li><code>Cảnh báo lỗi nếu truyền sai kiểu dữ liệu</code> khi đang dev. Thỉnh thoảng mình hay quên, không để ý loại dữ liệu truyền vào component, dẫn tới một số trường hợp tính toán sai và không như mong muốn, với <code>Type Checking</code> nó sẽ giúp mình báo lỗi để mình biết và fix sớm.</li> <li>Type Checking nó chỉ hoạt động khi dev, còn khi lên production nó không chạy nên không sợ bị ảnh hưởng tới performance.</li> <li>Khi component của bạn dần lớn, sử dụng nhiều props, việc khai báo tập trung này giúp bạn có thể biết được, à component này đang sử dụng props gì. Nếu không có, bạn phải scan hết code của component mới biết nó đang dùng những props nào 😭</li> </ul> <blockquote> <p>Link tham khảo: <a href="https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes">https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes</a></p> </blockquote> <h3 id="3-form">3. Form</h3> <p>Trong dự án thực tế, ít ai mà tự xử lý các vấn đề liên quan tới form, thay vào đó là sử dụng một thư viện có sẵn. Ở đây mình có một vài ứng cử viên: </p> <ul> <li><code>React Hook Form</code> (recommended): mới nhất.</li> <li><code>Formik</code>: phổ biến nhất.</li> <li><code>Redux Form</code>: cái này lưu ý bạn phải dùng redux à nhen 😉</li> </ul> <p>Bạn có thể chọn 1 trong 3 để học và áp dụng vào dự án của mình. Nhưng recommend là học <code>React Hook Form</code> hoặc <code>Formik</code> thôi.</p> <p>Khi làm việc với Form, bạn sẽ cần tới một schema validator để hỗ trợ bạn validate dữ liệu trong Form, 2 ứng cử viên cho vị trí này: </p> <ul> <li><a href="https://hapi.dev/module/joi/api/">Joi</a></li> <li><a href="https://github.com/jquense/yup">Yup</a>: được inspired từ Joi</li> </ul> <p><strong>Làm việc với Form, cần lưu ý điều gì?</strong></p> <ul> <li>Làm sao set được giá trị khởi tạo cho form.</li> <li>Tổ chức Form như thế nào, bạn nên phân biệt rõ 3 levels <ul> <li>Thứ nhất là <code>Form</code>: Thư viện quản lý Form như <code>Formik</code> hay <code>react-hook-form</code></li> <li>Thứ hai là <code>Form Field</code>: cầu nối để bind giá trị của <code>form</code> vào <code>ui control</code>.</li> <li>Thứ ba là <code>UI Control</code>: cái này là những control của thư viện Bootstrap, Material Design hay AntDesign.</li> <li>Để hiểu rõ hơn, cùng mình tìm hiểu qua video này nhé: <a href="https://youtu.be/LuNYJuyQxKE">https://youtu.be/LuNYJuyQxKE</a></li> </ul> </li> </ul> <h3 id="4-routing">4. Routing</h3> <ul> <li>Cái này thì bạn sẽ dùng package <code>react-router-dom</code> nè hehe </li> <li>Tài liệu tham khảo đây: <a href="https://reacttraining.com/react-router/web/guides/quick-start">https://reacttraining.com/react-router/web/guides/quick-start</a></li> <li>Setup routing trong project đơn giản: <a href="https://youtu.be/mAhUJdf0Kug">https://youtu.be/mAhUJdf0Kug</a></li> </ul> <p>Một số điều bạn cần lưu ý khi làm việc với routing:</p> <ul> <li>Setup routing trong một project gồm những bước nào?</li> <li>Tìm hiểu về Router, Switch, Route và Redirect.</li> <li>Setup nested routing như thế nào? Đây chính là cách tạo ra layout chung ở component cha, và tuỳ vào routing con sẽ render component con tương ứng.</li> </ul> <h3 id="5-api">5. API</h3> <ul> <li>API là cách thức để client và server có thể giao tiếp với nhau.</li> <li>Mình có một vài lựa chọn để thực hiện gọi một API: <ul> <li><a href="https://javascript.info/xmlhttprequest">XHR</a>: cái này hơi cũ cũ òi, viết dạng callback.</li> <li><a href="https://javascript.info/fetch">Fetch</a>: cái này có sẵn trong trình duyệt, viết dạng Promise.</li> <li><a href="https://github.com/axios/axios">Axios</a> (recommended): cái này nên dùng trong project thực tế nè.</li> </ul> </li> </ul> <p><strong>Tổ chức API module trong project thực tế như thế nào?</strong></p> <ul> <li>Thường các file api sẽ được đặt trong 1 folder tên là <code>api</code></li> <li>Lựa chọn 1 http client: thường là <code>axios</code>, còn trường hợp project nhỏ, đơn giản thì có thể dùng <code>fetch</code> cũng được. Fetch tiện cái là <code>ko cần cài thêm thư viện</code>. Còn axios thì phải cài thêm package <code>axios</code> nhen.</li> </ul> <pre><code>api |<span class="hljs-number">__</span> axiosClient.js hoặ<span class="hljs-built_in">c</span> fetchClient.js: config http client và cung <span class="hljs-built_in">c</span>ấp <span class="hljs-built_in">c</span>á<span class="hljs-built_in">c</span> phương thứ<span class="hljs-built_in">c</span> <span class="hljs-keyword">get</span>, post, put, ... |<span class="hljs-number">__</span> productApi.js |<span class="hljs-number">__</span> categoryApi.js |<span class="hljs-number">__</span> userApi.js |<span class="hljs-number">__</span> ... <span class="hljs-built_in">c</span>ứ mỗi một resource sẽ <span class="hljs-built_in">c</span>ó một file <span class="hljs-type">API</span> tương ứng 😉 </code></pre><ul> <li>Sắp tới sẽ có video giải thích về API module này. Mình bổ sung link sau hen hihi </li> </ul> <h3 id="6-hooks">6. Hooks</h3> <ul> <li>Ông thần này ra đời giúp Functional component mạnh lên hẵn, thẩm chí vượt mặt cả Class component.</li> <li>Mình có làm 1 series về hooks, đơn giản, dễ hiểu và khá là chi tiết, bạn có thể tham khảo ở đây hen <a href="https://www.youtube.com/playlist?list=PLeS7aZkL6GOsHNoyeEpeL8B1PnbKoQD9m">https://www.youtube.com/playlist?list=PLeS7aZkL6GOsHNoyeEpeL8B1PnbKoQD9m</a></li> </ul> <h3 id="7-state-management">7. State management</h3> <p>Lưu ý khi có state cần đặt câu hỏi: </p> <ul> <li>Nếu state này chỉ dùng cho 1 component hiện tại --&gt; dùng component state. </li> <li>Nếu state này nó share cho nhiều components khác nhau --&gt; cần thư viện quản lý state.</li> </ul> <p>Hiện tại thì <a href="https://redux.js.org/introduction/getting-started">Redux</a> chiếm lợi thế trên thị trường òi khi nhắc tới state management.</p> <ul> <li>Giờ có <a href="https://redux-toolkit.js.org/">Redux Toolkit</a> giúp mình sử dụng Redux đơn giản hơn, code ít hơn và được handle bên dưới nhiều hơn.</li> <li>Khuyến khích các bạn nên học Redux cơ bản trước, rồi hãy tới Redux Toolkit nhé.</li> </ul> <p>Nhưng gần đây, Facebook có đang thử nghiệm một thư viện để quản lý state cho ReactJS, đó là <a href="https://recoiljs.org/">Recoil</a>.</p> <ul> <li>Lưu ý vẫn còn đang thử nghiệm, nên hãy khoan apply cho production.</li> <li>Mình có làm 1 vài videos về Recoil, nếu quan tâm bạn có thể tham khảo hen.</li> </ul> <h2 id="m-t-v-i-topic-n-ng-cao">Một vài topic nâng cao</h2> <h3 id="1-hoc">1. HOC</h3> <ul> <li>Tham khảo <a href="https://reactjs.org/docs/higher-order-components.html">https://reactjs.org/docs/higher-order-components.html</a></li> </ul> <h3 id="2-authentication">2. Authentication</h3> <p>Cái này là phần đăng nhập, đăng ký rồi quên mật khẩu các kiểu, ... Thường project nào cũng có và được làm sẵn, ít người có cơ hội được làm phần này vì nó khá phức tạp và mỗi project setup 1 lần là xong, ít khi phải đụng lại lần 2 🙂</p> <p>Để làm cái này, mình có thể dùng mấy ông lớn để giúp mình như</p> <ul> <li><a href="https://firebase.google.com/docs/auth">Firebase Auth</a></li> <li><a href="https://auth0.com/">Auth0</a></li> </ul> <p>Các bạn chịu khó đọc docs để hiểu nó là gì nha.</p> <ul> <li>Cần hiểu được 1 cái flow đăng nhập, đăng ký diễn ra như thế nào.</li> <li>Token là gì? Tại sao lại cần quản lý nó ? Không có token có được không?</li> <li>Nhập username, password lên server có bị lộ thông tin giữa đường không? </li> <li>Nên lưu token trên website ở đâu?</li> <li>Lỡ token mà bị expired thì phải xử lý thế nào? </li> <li>...</li> </ul> <h3 id="3-i18n">3. I18n</h3> <ul> <li>Các bạn search Google xem i18n là viết tắt của cái gì nha.</li> <li>Cái này được dùng cho việc hỗ trợ đa ngôn ngữ, khi click vào ngôn ngữ tương ứng thì website được đổi ngôn ngữ tức thì.</li> <li>Package được sử dụng là <a href="https://react.i18next.com/">React i18 next</a> </li> <li>Ông thần này sử dụng được cho cả Class component và Function component (có hooks)</li> <li>Có phải project nào cũng hỗ trợ đa ngôn ngữ không? Cũng tuỳ project, nên xác định ngay từ đầu, nếu có làm đa ngôn ngữ thì setup từ đầu luôn cho đỡ khổ. </li> </ul> <h3 id="4-static-sites">4. Static sites</h3> <ul> <li><a href="https://github.com/react-static/react-static">React Static</a></li> <li><a href="https://www.gatsbyjs.org/">Gatsby</a></li> <li><a href="https://nextjs.org/">NextJS</a></li> </ul> <h3 id="5-deployment">5. Deployment</h3> <p>Làm thế nào để deploy website lên server để share cho người khác xem thành quả cày cuốc của mình.</p> <ul> <li>Deploy siêu đơn giản giống mình trong video này: </li> <li>Tham khảo full options tại đây: <a href="https://create-react-app.dev/docs/deployment/">https://create-react-app.dev/docs/deployment/</a></li> </ul> <h2 id="ngu-n-t-i-li-u-tham-kh-o">Nguồn tài liệu tham khảo</h2> <p>Rất nhiều link tham khảo về các thư viện làm việc về ReactJS được tổng hợp ở đây: <a href="https://github.com/enaqx/awesome-react">https://github.com/enaqx/awesome-react</a>. Có gì mọi người tham khảo thêm hen. 😉 </p> <blockquote> <p>CẢNH BÁO: Lạc lối do nhiều links tham khảo quá 🤣</p> </blockquote> <p>Những thông tin mình ghi nhận trong bài này là từ kinh nghiệm cá nhân, nên sẽ có phần thiếu sót, mọi người hãy cùng bổ sung, đóng góp cho nó hoàn chỉnh nhé. <br/> Cảm ơn mọi người rất nhiều nè ❤️</p>`,
      description:
        "Amet minim mollit non deserunt ullamco est sit aliqua dolor do amet sint. Velit officia consequat duis enim velit mollit. Exercitation veniam consequat sunt nostrud amet.",
    },
    {
      slug: "git-dung-trong-du-an-thuc-te",
      title: "Git - Các lệnh được dùng từ lúc nhận task cho tới lúc tạo PR 🎉",
      author: "Hậu Nguyễn",
      author_title: "Senior Software Engineer at fram^",
      author_url: " https://github.com/paulnguyen-mn",
      author_image_url:
        "https://avatars3.githubusercontent.com/u/31444102?s=400&u=c545a527aa31843e1361462e410c0f51863e8e26&v=4",
      image:
        "https://images.unsplash.com/photo-1549923746-c502d488b3ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1351&q=80",
      tags: "reactjs, phỏng vấn reactjs",
      markdowHtml: `<p>Chắc hẳn nhiều bạn rất hồi hộp, lo lắng khi chuẩn bị cho buổi phỏng vấn ReactJS sắp tới đúng không nào? Hiểu điều đó, mình có viết ra một vài ý, hi vọng bạn nắm được format một buổi phỏng vấn reactjs diễn ra như thế nào và hay hỏi những topic nào, từ đó giúp bạn cảm giác tự tin hơn khi đi phỏng vấn. 🙂</p> <!-- truncate--> <p><img src="https://images.unsplash.com/photo-1549923746-c502d488b3ea?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1351&amp;q=80" alt="From unplash.com"></p> <p><strong>AGENGA:</strong></p> <ol> <li>Một vài lưu ý chung</li> <li>Ôn tập kiến thức JS/ReactJS</li> <li>Cày thuật toán, giải thuật</li> <li>Tìm hiểu về công ty mà mình xin ứng tuyển</li> </ol> <blockquote> <p>Lưu ý: </p> <ul> <li>Tuỳ mỗi công ty có một style phỏng vấn khác nhau, nên các bạn chỉ tham khảo, đừng mặc định là công ty nào cũng làm giống như bài này chia sẻ nhé 😉 </li> <li>Đây là chia sẻ chung cho tất cả level: từ junior tới senior. Tuỳ level mà các câu hỏi có thể có hay không, hoặc độ khó sẽ khác nhau.</li> </ul> </blockquote> <hr> <h2 id="m-t-v-i-l-u-chung">Một vài lưu ý chung</h2> <p>Một buổi phỏng vấn thường gồm các phần:</p> <ul> <li>Làm quen, chào hỏi.</li> <li>Tìm hiểu về kinh nghiệm làm việc ở các project trước đây, tập trung vào project gần nhất.</li> <li>Giải quyết các tình huống đưa ra:<ul> <li>Xử lý tình huống trong công việc.</li> <li>Xử lý bài toán coding về giải thuật.</li> </ul> </li> <li>Tìm hiểu về mong muốn, nguyện vọng của bạn</li> <li>Đặt câu hỏi về công ty, dự án sắp tới sẽ làm nếu bạn được nhận.</li> </ul> <hr> <p>Lưu ý trước và trong buổi phỏng vấn:</p> <ul> <li><strong>Ăn mặc:</strong> gọn gàng là được, không cần phải thiệt là đẹp nè. Làm IT ko có nhu cầu đẹp hihi. Đơn giản quần jean, áo thun cũng được òi. Không nhất thiết phải là áo sơ mi mới được nhé. 😉</li> <li><strong>Thời gian:</strong> Nên đến trước giờ hẹn <code>10-15p</code>, đừng đến đúng giờ nhé. Vì tới nơi, các bạn có chút thời gian ngồi nghỉ xíu trước khi vào phỏng vấn nè. 😜 Nhưng cũng đừng tới sớm quá đáng, như sớm 30p chẳng hạn thì hơi lố 😅</li> <li><strong>Liên lạc:</strong> Nên xin <code>số điện thoại</code> để khi tới nơi không biết gì thì hỏi. Ví dụ như: chỗ để xe, đi tháng máy chỗ nào, lầu mấy, vân vân mây mây. </li> <li><strong>Thái độ:</strong> giữ cho mình cái mong muốn <code>sẵn sàng học hỏi, tìm tòi cái mới</code>, chứ đừng bảo thủ, em biết cái này, em chỉ làm cái này thôi, em không muốn tìm hiểu công nghệ mới thì dễ tạch nè.</li> <li><strong>Thoải mái, tự nhiên:</strong> cái này tuỳ tâm lý từng bạn, không dễ để có được trạng thái này. Cố gắng hít một hơi thât sâu rồi thở ra cho nhẹ người rồi <code>giữ bình tĩnh</code>. Tự nhiên nhất có thể nhé. Nếu cần nước cứ lịch sử xin một ly nước (nếu ko có) chứ đừng để khát khô cổ họng rồi không nói nổi nha hehee.</li> <li><strong>Thẳng thắn chia sẻ:</strong> một điều chắc chắn là bạn sẽ <code>không thể nào biết hết tất cả mọi thứ</code>, sẽ có những câu bạn không biết trả lời, <code>cứ thẳng thắn</code> nói là em chưa biết phần này, em sẽ tìm hiểu thêm ạ. Hoặc là em thấy rất hay và thú vị, nếu có cơ hội được làm việc thì em chắc chắn sẽ nghiên cứu thêm để học hỏi ạ. 😉</li> <li><strong>Hiểu được mong muốn của bản thân:</strong> <ul> <li>Bạn mong muốn được làm gì ở công ty này?</li> <li>Bạn mong muốn được học hỏi công nghệ nào?</li> <li>Bạn dự định tương lai sẽ phát triển theo hướng nào: technical hay management.</li> <li>Bạn có kế hoạch gì cho riêng mình để hoàn thành mục tiêu đó hay không? Đại loại nếu bạn không biết bạn muốn gì thì làm sao bạn biết bạn có phù hợp với công ty này hay không?</li> </ul> </li> </ul> <h2 id="1-n-t-p-ki-n-th-c-js-reactjs">1. Ôn tập kiến thức JS/ReactJS</h2> <p>Phần này mục đích là để trả lời phần câu hỏi về kiến thức liên quan tới project gần nhất của bạn. Tuỳ bạn nói bạn biết gì mà sẽ bị hỏi liên quan tới những cái bạn biết hehee </p> <blockquote> <p>TIP: Đừng chém gió phần bạn không biết, kẻo bị hỏi thêm là tạch 😉</p> </blockquote> <h3 id="html-css">HTML/CSS</h3> <ul> <li>Layout bằng flexbox, grid.</li> <li>Hỏi về UI library bạn sử dụng: Bootstrap, Material Design, Ant Design.</li> <li>Hỏi về cách bố trí layout.</li> <li>Cho một phần giao diện nào đó, hỏi bạn làm thế nào để ra được như vậy (chỉ trình bày, ko code)</li> <li>Hỏi về cách tổ chức styles trong project.</li> <li>BEM là gì? Apply như thế nào?</li> <li>SCSS: có gì vui với ông này, có những tính năng nào mà bạn đã sử dụng.</li> <li>Specificity: độ cụ thể trong css</li> <li>Làm sao customize được styles của một thư viện UI nào đó.</li> <li>Reset CSS vs Normalize CSS </li> <li>...</li> </ul> <h3 id="javascript">JAVASCRIPT</h3> <ul> <li>&quot;use strict&quot;</li> <li>var, const, let khác nhau ra sao?</li> <li>Block scope với Function scope</li> <li>Hoisting là gì? Cái này có thể bị hỏi dạng cho đoạn code rồi hỏi kết quả và giải thích.</li> <li>Closure</li> <li>Value type vs reference type </li> <li>Bất đồng bộ trong javascript</li> <li>setTimeout(), setInterval()</li> <li>Callback</li> <li>Promise</li> <li>Module trong javascript: import, export, ...</li> <li>ES6: arrow function, for...of, async for...of, async/await, ...</li> <li>Cho các tình huống xử lý javascript, bạn vận dụng kiến thức để cung cấp giải pháp giải quyết nó.</li> <li>...</li> </ul> <h3 id="reactjs">REACTJS</h3> <ul> <li>Component vs PureComponent </li> <li><code>Life cycle</code>: cái nào nên sử dụng cho mục đích nào (cái này mình có share trên kênh Youtube của mình)</li> <li>Phân biệt <code>component state</code>, <code>Context API</code> và <code>Redux</code>: khi nào sử dụng cái nào và lý do.</li> <li><strong>Refs trong reactjs</strong>: bạn có dùng nó chưa và dùng cho việc gì? Hoặc ngược lại cho tình huống xài refs để giải quyết xem bạn có biết hay không ?</li> <li>Routing thì có phần nested routing, nó là gì và khi nào cần nó.</li> <li>Setup routing cho mấy trang cần phải log in như thế nào?</li> <li>Form bạn dùng thư viện nào để quản lý: <code>Formik</code>, <code>Redux-Form</code>, <code>React-Hook-Form</code>. Mỗi cái sẽ có những vấn đề riêng có thể hỏi.</li> <li><code>Auth</code>: bạn handle phần authentication trong app như thế nào? Token, refresh token, expired token? ( nâng cao )</li> <li><code>React hooks</code>: bạn sử dụng hooks nào và cho mục đích gì?</li> <li><code>Custom hook</code>: bạn có tự viết một custom hook nào chưa, nếu có thì nó dùng để làm gì ?</li> <li>Redux thì giờ có <code>Redux Toolkit</code> : nó là gì vậy ta ?</li> <li>Quản lý state bên Facebook đang có thư viện mới là <code>Recoil</code>: bạn có nghe về nó không? bạn thấy thế nào? 🤣</li> <li>Những thư viện bạn hay dùng trong reactjs project.</li> <li>...</li> </ul> <h2 id="2-c-y-thu-t-to-n-gi-i-thu-t">2. Cày thuật toán, giải thuật</h2> <p>Cái này thì đa dạng lắm nên mình không biết sẽ bị hỏi về vấn đề gì nhen. Nên ôn luyện hết cho chắc 😉 Thường người ra đề sẽ cho một bài toán gì đó, mình tự phân tích và sử dụng thuật toán thích hợp để giải nó.</p> <ul> <li>Tìm kiếm, sắp xếp đơn giản.</li> <li>Tìm chuỗi con dài nhất, ngắn nhất và các biến thể của dạng này.</li> <li>Đệ quy.</li> <li>Tìm số bí ẩn trong mảng thoả điều kiện gì đó.</li> <li>Đồ thị (cái này cũng ít bị hỏi)</li> <li>Design pattern (Singleton, Observer, ...)</li> <li>Cho đoạn code, hỏi kết quả và giải thích.</li> <li>Quy hoạch động (cái này hơi nâng cao òi, chắc ít bị hỏi trừ khi công ty làm về thuật toán)</li> <li>... nói chung cái này tuỳ khả năng logic của các bạn đó 😉</li> </ul> <h2 id="3-t-m-hi-u-v-c-ng-ty-m-m-nh-xin-ng-tuy-n">3. Tìm hiểu về công ty mà mình xin ứng tuyển</h2> <p><strong>Tìm hiểu công ty:</strong></p> <ul> <li>Công ty làm lĩnh vực gì?</li> <li>Size bao nhiêu người? </li> <li>Thành lập khi nào?</li> <li>Những dự án công ty đã thực hiện.</li> <li>Reviews về công ty.</li> <li>... </li> </ul> <p><strong>Hỏi về dự án bạn &quot;sẽ&quot; được nhận vào làm</strong></p> <ul> <li>Dự án làm về cái gì?</li> <li>Sử dụng công nghệ gì, techstack có những gì trong đó.</li> <li>Có bao nhiêu người rồi, và bạn sẽ làm việc với ai?</li> <li>Tính của team có vui vẻ, hoà đồng không?</li> <li>... nói chung bạn quan tâm gì về team của bạn sắp làm thì cứ hỏi hen hehee</li> </ul> <hr> <p>Hi vọng bài chia sẻ này hữu ích với mọi người! <br/> Chúc các bạn có một buổi phỏng vấn thành công tốt đẹp nhé! 🎉 <br/></p> <blockquote> <p>From Easy Frontend with ❤️</p> </blockquote>`,
      description:
        "Amet minim mollit non deserunt ullamco est sit aliqua dolor do amet sint. Velit officia consequat duis enim velit mollit. Exercitation veniam consequat sunt nostrud amet.",
    },
  ];

  return {
    paths: response.map((item: any) => ({
      params: { slug: `${item.slug}` },
    })),
    fallback: false, // can also be true or 'blocking'
  };
}

export async function getStaticProps(context: GetStaticPropsContext) {
  // Lấy danh sách sản phẩm từ API

  let postid = context.params?.slug;
  if (!postid) notFound: true;
  const response: any = [
    {
      slug: "bi-kip-phong-van-reactjs-thanh-cong",
      title: "Bí kíp cho buổi phỏng vấn ReactJS thành công 🎉",
      author: "Hậu Nguyễn",
      author_title: "Senior Software Engineer at fram^",
      author_url: " https://github.com/paulnguyen-mn",
      author_image_url:
        "https://avatars3.githubusercontent.com/u/31444102?s=400&u=c545a527aa31843e1361462e410c0f51863e8e26&v=4",
      image:
        "https://images.unsplash.com/photo-1549923746-c502d488b3ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1351&q=80",
      tags: "reactjs, phỏng vấn reactjs",
      markdowHtml: `<p>Khi nhắc tới git có khá là nhiều lệnh khác nhau, tuy nhiên trong thực tế sử dụng trong dự án thì có những lệnh nào được sử dụng nhiều nhất? 🤔 Hãy cùng mình khám phá qua bài blog này nhé! 😉</p><!-- truncate--><h2 id="0-nh-n-task-v-d-y-task-c-id-l-123">0. Nhận task, ví dụ ở đây task có id là 123</h2><ul><li>Tí nữa, đọc thấy tạo nhánh có số 123 thì các bạn hiểu ngầm nó chính là <code>taskId</code> nhen.</li><li>Ví dụ team mình dev trên nhánh <code>develop</code>.</li></ul><h2 id="1-l-y-code-m-i-nh-t-tr-n-branch-develop">1. Lấy code mới nhất trên branch develop</h2><pre><code class="lang-sh">git checkout develop # switch sang nhánh developgit pull # lấy <span class="hljs-keyword">code</span> mới nhất về</code></pre><h2 id="2-l-m-task-tr-c-ti-p-tr-n-nh-nh-develop">2. Làm task trực tiếp trên nhánh develop</h2><p>CODING CHANGES 😎<br />Sau khi code xong, nhờ review lại những thay đổi của mình, review cẩn thận, từ từ.<br />Review về coding convention.<br />Review về console log đã xoá chưa?<br />Review về imports (có dư thừa gì ko?)<br />Review về eslints <br />Review xem chỗ nào logic phức tạp nên add thêm comment vào.<br />Review xem chỗ nào code nhiều if/else quá thì refactor lại.<br />...<br />Review bằng VSCode hen, cho nó dễ nhìn, còn bạn muốn cool ngầu thì cứ git diff và check nhé! 😎<br />Hãy tập thói quen review code của bản thân cẩn thận trước khi đưa cho lead review nhé! 😉</p><h2 id="3-chu-n-b-t-o-pull-request-pr-">3. Chuẩn bị tạo Pull Request (PR)</h2><blockquote><p>Sau khi đã code xong, giờ chuẩn bị tạo PR<br />Nhưng có thể trong lúc mình làm, ai đó đã update thêm lên nhánh develop rồi.<br />Nên mình phải lấy code mới nhất trên nhánh develop rồi mới apply cái changes của mình.</p></blockquote>
      <h2 id="4-t-o-nh-nh-cho-code-changes-c-a-m-nh">4. Tạo nhánh cho code changes của mình</h2><pre><code class="lang-sh">git checkout -b feature/<span class="hljs-number">123</span>-<span class="hljs-keyword">add</span><span class="bash">-address-ui</span></code></pre><h2 id="5-l-y-code-t-trong-stash-ra-h-i-n-y-l-u-b-ng-git-stash-">5. Lấy code từ trong stash ra (hùi nảy lưu bằng git stash)</h2><pre><code class="lang-sh">git stash <span class="hljs-keyword">pop</span></code></pre><blockquote><p>OPTIONAL: resolve conflicts nếu có, nhớ test lại để đảm bảo code còn chạy ngon 😅</p></blockquote><h2 id="6-t-o-commit-vi-t-commit-message">6. Tạo commit, viết commit message</h2>
      <blockquote><p>📝Lưu ý chỗ chữ màu vàng<br/> - Dòng đầu tiên là title<br/> - Dòng thứ 2 là empty ( BẮT BUỘC ) <br/> - Dòng thứ 3 trở đi là dòng mô tả thêm về Pull Request của mình.<br/> Convention này nó giúp bạn tự động điền title, description vào ô tương ứng trên Github, Gitlab, Bitbucket, ...</p></blockquote><h2 id="7-push-code-l-n-remote-repository-github-gitlab-bitbucket-">7. Push code lên remote repository (Github, Gitlab, Bitbucket, ...)</h2><pre><code class="lang-sh">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> <span class="hljs-built_in">feature</span>/<span class="hljs-number">123</span>-address-ui</code></pre><h2 id="cu-i-c-ng-l-n-remote-repo-t-o-pr-mr-v-o-nh-nh-develop-xong-nh-lead-review-th-i-hehe">Cuối cùng, lên remote repo tạo PR/MR vào nhánh develop. Xong nhờ lead review thôi hehe</h2><p><strong>📝LƯU Ý</strong></p><ul><li>Tuỳ dự án sẽ có quy định tên nhánh khác nhau, nhớ follow theo team.</li><li>Làm việc trên nhánh nào cũng tuỳ team, <code>ko phải</code> lúc nào cũng là <code>develop</code>.</li><li><code>Không phải</code> ai cũng apply cái process này giống mình, <code>mỗi người mỗi kiểu</code>.</li><li>Ở trên là process, mình đi làm thấy nó tốt và đã apply suốt thời gian qua, thấy hiệu quả nên chia sẻ lại cho mọi người nè, mọi người đọc tham khảo, thấy hay thì có thể vận dụng nhen 😉</li></ul><p>CHÚC CẢ NHÀ SỨC KHOẺ VÀ HỌC TẬP TỐT NHÉ! ❤️</p>`,
      description:
        "Amet minim mollit non deserunt ullamco est sit aliqua dolor do amet sint. Velit officia consequat duis enim velit mollit. Exercitation veniam consequat sunt nostrud amet.",
    },
    {
      slug: "lo-trinh-hoc-reactjs-co-ban-2020",
      title: "Lộ trình học ReactJS cơ bản cho người mới bắt đầu 2020 🥰",
      author: "Hậu Nguyễn",
      author_title: "Senior Software Engineer at fram^",
      author_url: " https://github.com/paulnguyen-mn",
      author_image_url:
        "https://avatars3.githubusercontent.com/u/31444102?s=400&u=c545a527aa31843e1361462e410c0f51863e8e26&v=4",
      image:
        "https://images.unsplash.com/photo-1549923746-c502d488b3ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1351&q=80",
      tags: "reactjs, phỏng vấn reactjs",
      markdowHtml: `<p>Rất nhiều bạn thắc mắc không biết là học ReactJS là học những gì? Rồi bắt đầu từ đâu? Sử dụng những package, thư viện nào, ... Để giúp các bạn trả lời câu hỏi đó, mình có tổng hợp lại một số nguồn tham khảo cũng như kinh nghiệm cá nhân của mình để viết ra lộ trình học ReactJS này, hi vọng giúp ích được cho các bạn. 😉</p> <!-- truncate--> <ul> <li><strong>Đôi tượng</strong>: mới bắt đầu học ReactJS mà không biết học những gì.</li> <li><strong>Yêu cầu kiến thức</strong>: <ul> <li>Javascript cơ bản: <a href="https://javascript.info/">https://javascript.info/</a></li> <li>ES6 syntax: <a href="http://es6-features.org/#Constants">http://es6-features.org/#Constants</a></li> <li>Git cơ bản: Học cách quản lý source code</li> <li>NPM (Node Package Manager): Tìm hiểu xem đây là gì?</li> <li>Tiếng Anh (vì tài liệu đa số là Tiếng Anh)</li> </ul> </li> </ul> <p>Nếu như mọi người chưa biết Javascript là gì, thì mình khuyên các bạn nên học JS trước rồi hẵn sang ReactJS nhé, kẻo ngợp nè! 😉</p> <h2 id="m-ng-ki-n-th-c-c-b-n-b-t-bu-c-">Mảng kiến thức cơ bản (BẮT BUỘC)</h2> <p><strong>MỘT VÀI NOTES:</strong></p> <ul> <li>ReactJS là <code>thư viện</code> để xây dựng UI component, chứ không phải <code>framework</code> nha. </li> <li><code>Lib (thư viện)</code> vs <code>framework</code> khác nhau cái gì? Các bạn chịu khó google để biết thêm nha.</li> <li>Version hiện tại của ReactJS là bao nhiêu? </li> <li>ReactJS là của ai hay tổ chức nào?</li> <li>Tại sao phải cần ReactJS, sao không viết thuần javascript? </li> <li>Sẽ hơi khó hiểu khi mới đầu tiếp cận ReactJS, nhưng không sao, cứ đi tiếp nha hehee</li> </ul> <h3 id="0-setup-m-i-tr-ng-l-m-vi-c">0. Setup môi trường làm việc</h3> <p><strong>Bạn cần gì để bắt đầu code được ReactJS:</strong></p> <ul> <li>Cài đặt <a href="https://nodejs.org/en/">NodeJS</a> (runtime của javascript)</li> <li>Code editor: dùng <a href="https://code.visualstudio.com/">VSCode</a></li> <li>Cài đặt một vài extension hữu ích của VSCode: (OPTIONAL)<ul> <li>Live Server</li> <li>Material Theme Icons</li> <li>Material Theme</li> <li>Sử dụng Fira Code font</li> <li>ReactJS code snippets</li> <li>ESLint</li> <li>Babel Javascript</li> <li>Bracket Pair Colorizer:</li> </ul> </li> <li>Bắt đầu tạo project:<ul> <li>Dùng tool <code>Create React App</code> để tạo một ReactJS project mẫu: <a href="https://create-react-app.dev/docs/getting-started/">https://create-react-app.dev/docs/getting-started/</a></li> </ul> </li> </ul> <p>Tada xong tới đây là bạn phải chạy lên được cái website đơn giản của ReactJS rồi đó. <br/> Giờ học code ReactJS thôi hehe 😎</p> <h3 id="1-ki-n-th-c-n-n-t-ng">1. Kiến thức nền tảng</h3> <ul> <li>Đi hết phần Main Concepts của ReactJS, bắt đầu ở đây: <a href="https://reactjs.org/docs/hello-world.html">https://reactjs.org/docs/hello-world.html</a></li> </ul> <blockquote> <p><strong>Lưu ý</strong>: </p> <ul> <li>Không vội vàng, đừng đi nhanh mà không hiểu gì hết.</li> <li>Đi từng mục một, đi chậm, học tới đâu, lấy code bỏ vào VSCode chạy lên thử coi nó ra như thế nào để hiêu nó.</li> <li>Nếu gặp khó khăn, không hiểu topic nào thì tìm thêm blog, videos về chủ đề đó mà coi thêm.</li> </ul> </blockquote> <ul> <li>Sau khi đi hết phần kiến thức này, hãy tự làm một website đơn giản mà bạn thích: <ul> <li><code>Todo App</code>: Thêm, Xoá, Sửa và hiển thị ra danh sách TODOS</li> <li><code>Simple Cart</code>: Hiển thị danh sách sản phẩm, thêm vào giỏ hàng và tính tiền.</li> <li>... </li> </ul> </li> </ul> <blockquote> <p>Mục đích cho phần này để đảm bảo các bạn hiểu và vận dụng được kiến thức của ReactJS.</p> </blockquote> <ul> <li>Thêm vào đó, các bạn có thể tham khảo thêm các videos mình làm cho ReactJS cơ bản để nắm rõ hơn một số chủ đề mình trao đổi: <a href="https://www.youtube.com/playlist?list=PLeS7aZkL6GOsPo-bFZSNuu4VhYicRjlAq">https://www.youtube.com/playlist?list=PLeS7aZkL6GOsPo-bFZSNuu4VhYicRjlAq</a></li> </ul> <h3 id="2-type-checking">2. Type checking</h3> <ul> <li>Đây là một nội dung OPTIONAL. Không có Type Checking, code của bạn vẫn chạy được bình thường.</li> <li>Thỉnh thoảng bạn thấy code như vầy: </li> </ul> <pre><code class="lang-js">
       <span class="hljs-keyword">default</span> Item; </code></pre> <ul> <li>Để ý cái phần <code>Item.propTypes</code>, khúc này dù có hay không thì code của bạn vẫn chạy.</li> </ul> <p><strong>Vậy Type Checking có tác dụng gì mà mình phải consider thêm nó vào?</strong></p> <ul> <li><code>Cảnh báo lỗi nếu truyền sai kiểu dữ liệu</code> khi đang dev. Thỉnh thoảng mình hay quên, không để ý loại dữ liệu truyền vào component, dẫn tới một số trường hợp tính toán sai và không như mong muốn, với <code>Type Checking</code> nó sẽ giúp mình báo lỗi để mình biết và fix sớm.</li> <li>Type Checking nó chỉ hoạt động khi dev, còn khi lên production nó không chạy nên không sợ bị ảnh hưởng tới performance.</li> <li>Khi component của bạn dần lớn, sử dụng nhiều props, việc khai báo tập trung này giúp bạn có thể biết được, à component này đang sử dụng props gì. Nếu không có, bạn phải scan hết code của component mới biết nó đang dùng những props nào 😭</li> </ul> <blockquote> <p>Link tham khảo: <a href="https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes">https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes</a></p> </blockquote> <h3 id="3-form">3. Form</h3> <p>Trong dự án thực tế, ít ai mà tự xử lý các vấn đề liên quan tới form, thay vào đó là sử dụng một thư viện có sẵn. Ở đây mình có một vài ứng cử viên: </p> <ul> <li><code>React Hook Form</code> (recommended): mới nhất.</li> <li><code>Formik</code>: phổ biến nhất.</li> <li><code>Redux Form</code>: cái này lưu ý bạn phải dùng redux à nhen 😉</li> </ul> <p>Bạn có thể chọn 1 trong 3 để học và áp dụng vào dự án của mình. Nhưng recommend là học <code>React Hook Form</code> hoặc <code>Formik</code> thôi.</p> <p>Khi làm việc với Form, bạn sẽ cần tới một schema validator để hỗ trợ bạn validate dữ liệu trong Form, 2 ứng cử viên cho vị trí này: </p> <ul> <li><a href="https://hapi.dev/module/joi/api/">Joi</a></li> <li><a href="https://github.com/jquense/yup">Yup</a>: được inspired từ Joi</li> </ul> <p><strong>Làm việc với Form, cần lưu ý điều gì?</strong></p> <ul> <li>Làm sao set được giá trị khởi tạo cho form.</li> <li>Tổ chức Form như thế nào, bạn nên phân biệt rõ 3 levels <ul> <li>Thứ nhất là <code>Form</code>: Thư viện quản lý Form như <code>Formik</code> hay <code>react-hook-form</code></li> <li>Thứ hai là <code>Form Field</code>: cầu nối để bind giá trị của <code>form</code> vào <code>ui control</code>.</li> <li>Thứ ba là <code>UI Control</code>: cái này là những control của thư viện Bootstrap, Material Design hay AntDesign.</li> <li>Để hiểu rõ hơn, cùng mình tìm hiểu qua video này nhé: <a href="https://youtu.be/LuNYJuyQxKE">https://youtu.be/LuNYJuyQxKE</a></li> </ul> </li> </ul> <h3 id="4-routing">4. Routing</h3> <ul> <li>Cái này thì bạn sẽ dùng package <code>react-router-dom</code> nè hehe </li> <li>Tài liệu tham khảo đây: <a href="https://reacttraining.com/react-router/web/guides/quick-start">https://reacttraining.com/react-router/web/guides/quick-start</a></li> <li>Setup routing trong project đơn giản: <a href="https://youtu.be/mAhUJdf0Kug">https://youtu.be/mAhUJdf0Kug</a></li> </ul> <p>Một số điều bạn cần lưu ý khi làm việc với routing:</p> <ul> <li>Setup routing trong một project gồm những bước nào?</li> <li>Tìm hiểu về Router, Switch, Route và Redirect.</li> <li>Setup nested routing như thế nào? Đây chính là cách tạo ra layout chung ở component cha, và tuỳ vào routing con sẽ render component con tương ứng.</li> </ul> <h3 id="5-api">5. API</h3> <ul> <li>API là cách thức để client và server có thể giao tiếp với nhau.</li> <li>Mình có một vài lựa chọn để thực hiện gọi một API: <ul> <li><a href="https://javascript.info/xmlhttprequest">XHR</a>: cái này hơi cũ cũ òi, viết dạng callback.</li> <li><a href="https://javascript.info/fetch">Fetch</a>: cái này có sẵn trong trình duyệt, viết dạng Promise.</li> <li><a href="https://github.com/axios/axios">Axios</a> (recommended): cái này nên dùng trong project thực tế nè.</li> </ul> </li> </ul> <p><strong>Tổ chức API module trong project thực tế như thế nào?</strong></p> <ul> <li>Thường các file api sẽ được đặt trong 1 folder tên là <code>api</code></li> <li>Lựa chọn 1 http client: thường là <code>axios</code>, còn trường hợp project nhỏ, đơn giản thì có thể dùng <code>fetch</code> cũng được. Fetch tiện cái là <code>ko cần cài thêm thư viện</code>. Còn axios thì phải cài thêm package <code>axios</code> nhen.</li> </ul>
       <ul> <li>Sắp tới sẽ có video giải thích về API module này. Mình bổ sung link sau hen hihi </li> </ul> <h3 id="6-hooks">6. Hooks</h3> <ul> <li>Ông thần này ra đời giúp Functional component mạnh lên hẵn, thẩm chí vượt mặt cả Class component.</li> <li>Mình có làm 1 series về hooks, đơn giản, dễ hiểu và khá là chi tiết, bạn có thể tham khảo ở đây hen <a href="https://www.youtube.com/playlist?list=PLeS7aZkL6GOsHNoyeEpeL8B1PnbKoQD9m">https://www.youtube.com/playlist?list=PLeS7aZkL6GOsHNoyeEpeL8B1PnbKoQD9m</a></li> </ul> <h3 id="7-state-management">7. State management</h3> <p>Lưu ý khi có state cần đặt câu hỏi: </p> <ul> <li>Nếu state này chỉ dùng cho 1 component hiện tại --&gt; dùng component state. </li> <li>Nếu state này nó share cho nhiều components khác nhau --&gt; cần thư viện quản lý state.</li> </ul> <p>Hiện tại thì <a href="https://redux.js.org/introduction/getting-started">Redux</a> chiếm lợi thế trên thị trường òi khi nhắc tới state management.</p> <ul> <li>Giờ có <a href="https://redux-toolkit.js.org/">Redux Toolkit</a> giúp mình sử dụng Redux đơn giản hơn, code ít hơn và được handle bên dưới nhiều hơn.</li> <li>Khuyến khích các bạn nên học Redux cơ bản trước, rồi hãy tới Redux Toolkit nhé.</li> </ul> <p>Nhưng gần đây, Facebook có đang thử nghiệm một thư viện để quản lý state cho ReactJS, đó là <a href="https://recoiljs.org/">Recoil</a>.</p> <ul> <li>Lưu ý vẫn còn đang thử nghiệm, nên hãy khoan apply cho production.</li> <li>Mình có làm 1 vài videos về Recoil, nếu quan tâm bạn có thể tham khảo hen.</li> </ul> <h2 id="m-t-v-i-topic-n-ng-cao">Một vài topic nâng cao</h2> <h3 id="1-hoc">1. HOC</h3> <ul> <li>Tham khảo <a href="https://reactjs.org/docs/higher-order-components.html">https://reactjs.org/docs/higher-order-components.html</a></li> </ul> <h3 id="2-authentication">2. Authentication</h3> <p>Cái này là phần đăng nhập, đăng ký rồi quên mật khẩu các kiểu, ... Thường project nào cũng có và được làm sẵn, ít người có cơ hội được làm phần này vì nó khá phức tạp và mỗi project setup 1 lần là xong, ít khi phải đụng lại lần 2 🙂</p> <p>Để làm cái này, mình có thể dùng mấy ông lớn để giúp mình như</p> <ul> <li><a href="https://firebase.google.com/docs/auth">Firebase Auth</a></li> <li><a href="https://auth0.com/">Auth0</a></li> </ul> <p>Các bạn chịu khó đọc docs để hiểu nó là gì nha.</p> <ul> <li>Cần hiểu được 1 cái flow đăng nhập, đăng ký diễn ra như thế nào.</li> <li>Token là gì? Tại sao lại cần quản lý nó ? Không có token có được không?</li> <li>Nhập username, password lên server có bị lộ thông tin giữa đường không? </li> <li>Nên lưu token trên website ở đâu?</li> <li>Lỡ token mà bị expired thì phải xử lý thế nào? </li> <li>...</li> </ul> <h3 id="3-i18n">3. I18n</h3> <ul> <li>Các bạn search Google xem i18n là viết tắt của cái gì nha.</li> <li>Cái này được dùng cho việc hỗ trợ đa ngôn ngữ, khi click vào ngôn ngữ tương ứng thì website được đổi ngôn ngữ tức thì.</li> <li>Package được sử dụng là <a href="https://react.i18next.com/">React i18 next</a> </li> <li>Ông thần này sử dụng được cho cả Class component và Function component (có hooks)</li> <li>Có phải project nào cũng hỗ trợ đa ngôn ngữ không? Cũng tuỳ project, nên xác định ngay từ đầu, nếu có làm đa ngôn ngữ thì setup từ đầu luôn cho đỡ khổ. </li> </ul> <h3 id="4-static-sites">4. Static sites</h3> <ul> <li><a href="https://github.com/react-static/react-static">React Static</a></li> <li><a href="https://www.gatsbyjs.org/">Gatsby</a></li> <li><a href="https://nextjs.org/">NextJS</a></li> </ul> <h3 id="5-deployment">5. Deployment</h3> <p>Làm thế nào để deploy website lên server để share cho người khác xem thành quả cày cuốc của mình.</p> <ul> <li>Deploy siêu đơn giản giống mình trong video này: </li> <li>Tham khảo full options tại đây: <a href="https://create-react-app.dev/docs/deployment/">https://create-react-app.dev/docs/deployment/</a></li> </ul> <h2 id="ngu-n-t-i-li-u-tham-kh-o">Nguồn tài liệu tham khảo</h2> <p>Rất nhiều link tham khảo về các thư viện làm việc về ReactJS được tổng hợp ở đây: <a href="https://github.com/enaqx/awesome-react">https://github.com/enaqx/awesome-react</a>. Có gì mọi người tham khảo thêm hen. 😉 </p> <blockquote> <p>CẢNH BÁO: Lạc lối do nhiều links tham khảo quá 🤣</p> </blockquote> <p>Những thông tin mình ghi nhận trong bài này là từ kinh nghiệm cá nhân, nên sẽ có phần thiếu sót, mọi người hãy cùng bổ sung, đóng góp cho nó hoàn chỉnh nhé. <br/> Cảm ơn mọi người rất nhiều nè ❤️</p>`,
      description:
        "Amet minim mollit non deserunt ullamco est sit aliqua dolor do amet sint. Velit officia consequat duis enim velit mollit. Exercitation veniam consequat sunt nostrud amet.",
    },
    {
      slug: "git-dung-trong-du-an-thuc-te",
      title: "Git - Các lệnh được dùng từ lúc nhận task cho tới lúc tạo PR 🎉",
      author: "Hậu Nguyễn",
      author_title: "Senior Software Engineer at fram^",
      author_url: " https://github.com/paulnguyen-mn",
      author_image_url:
        "https://avatars3.githubusercontent.com/u/31444102?s=400&u=c545a527aa31843e1361462e410c0f51863e8e26&v=4",
      image:
        "https://images.unsplash.com/photo-1549923746-c502d488b3ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1351&q=80",
      tags: "reactjs, phỏng vấn reactjs",
      markdowHtml: `<p>Chắc hẳn nhiều bạn rất hồi hộp, lo lắng khi chuẩn bị cho buổi phỏng vấn ReactJS sắp tới đúng không nào? Hiểu điều đó, mình có viết ra một vài ý, hi vọng bạn nắm được format một buổi phỏng vấn reactjs diễn ra như thế nào và hay hỏi những topic nào, từ đó giúp bạn cảm giác tự tin hơn khi đi phỏng vấn. 🙂</p> <!-- truncate--> <p><img src="https://images.unsplash.com/photo-1549923746-c502d488b3ea?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1351&amp;q=80" alt="From unplash.com"></p> <p><strong>AGENGA:</strong></p> <ol> <li>Một vài lưu ý chung</li> <li>Ôn tập kiến thức JS/ReactJS</li> <li>Cày thuật toán, giải thuật</li> <li>Tìm hiểu về công ty mà mình xin ứng tuyển</li> </ol> <blockquote> <p>Lưu ý: </p> <ul> <li>Tuỳ mỗi công ty có một style phỏng vấn khác nhau, nên các bạn chỉ tham khảo, đừng mặc định là công ty nào cũng làm giống như bài này chia sẻ nhé 😉 </li> <li>Đây là chia sẻ chung cho tất cả level: từ junior tới senior. Tuỳ level mà các câu hỏi có thể có hay không, hoặc độ khó sẽ khác nhau.</li> </ul> </blockquote> <hr> <h2 id="m-t-v-i-l-u-chung">Một vài lưu ý chung</h2> <p>Một buổi phỏng vấn thường gồm các phần:</p> <ul> <li>Làm quen, chào hỏi.</li> <li>Tìm hiểu về kinh nghiệm làm việc ở các project trước đây, tập trung vào project gần nhất.</li> <li>Giải quyết các tình huống đưa ra:<ul> <li>Xử lý tình huống trong công việc.</li> <li>Xử lý bài toán coding về giải thuật.</li> </ul> </li> <li>Tìm hiểu về mong muốn, nguyện vọng của bạn</li> <li>Đặt câu hỏi về công ty, dự án sắp tới sẽ làm nếu bạn được nhận.</li> </ul> <hr> <p>Lưu ý trước và trong buổi phỏng vấn:</p> <ul> <li><strong>Ăn mặc:</strong> gọn gàng là được, không cần phải thiệt là đẹp nè. Làm IT ko có nhu cầu đẹp hihi. Đơn giản quần jean, áo thun cũng được òi. Không nhất thiết phải là áo sơ mi mới được nhé. 😉</li> <li><strong>Thời gian:</strong> Nên đến trước giờ hẹn <code>10-15p</code>, đừng đến đúng giờ nhé. Vì tới nơi, các bạn có chút thời gian ngồi nghỉ xíu trước khi vào phỏng vấn nè. 😜 Nhưng cũng đừng tới sớm quá đáng, như sớm 30p chẳng hạn thì hơi lố 😅</li> <li><strong>Liên lạc:</strong> Nên xin <code>số điện thoại</code> để khi tới nơi không biết gì thì hỏi. Ví dụ như: chỗ để xe, đi tháng máy chỗ nào, lầu mấy, vân vân mây mây. </li> <li><strong>Thái độ:</strong> giữ cho mình cái mong muốn <code>sẵn sàng học hỏi, tìm tòi cái mới</code>, chứ đừng bảo thủ, em biết cái này, em chỉ làm cái này thôi, em không muốn tìm hiểu công nghệ mới thì dễ tạch nè.</li> <li><strong>Thoải mái, tự nhiên:</strong> cái này tuỳ tâm lý từng bạn, không dễ để có được trạng thái này. Cố gắng hít một hơi thât sâu rồi thở ra cho nhẹ người rồi <code>giữ bình tĩnh</code>. Tự nhiên nhất có thể nhé. Nếu cần nước cứ lịch sử xin một ly nước (nếu ko có) chứ đừng để khát khô cổ họng rồi không nói nổi nha hehee.</li> <li><strong>Thẳng thắn chia sẻ:</strong> một điều chắc chắn là bạn sẽ <code>không thể nào biết hết tất cả mọi thứ</code>, sẽ có những câu bạn không biết trả lời, <code>cứ thẳng thắn</code> nói là em chưa biết phần này, em sẽ tìm hiểu thêm ạ. Hoặc là em thấy rất hay và thú vị, nếu có cơ hội được làm việc thì em chắc chắn sẽ nghiên cứu thêm để học hỏi ạ. 😉</li> <li><strong>Hiểu được mong muốn của bản thân:</strong> <ul> <li>Bạn mong muốn được làm gì ở công ty này?</li> <li>Bạn mong muốn được học hỏi công nghệ nào?</li> <li>Bạn dự định tương lai sẽ phát triển theo hướng nào: technical hay management.</li> <li>Bạn có kế hoạch gì cho riêng mình để hoàn thành mục tiêu đó hay không? Đại loại nếu bạn không biết bạn muốn gì thì làm sao bạn biết bạn có phù hợp với công ty này hay không?</li> </ul> </li> </ul> <h2 id="1-n-t-p-ki-n-th-c-js-reactjs">1. Ôn tập kiến thức JS/ReactJS</h2> <p>Phần này mục đích là để trả lời phần câu hỏi về kiến thức liên quan tới project gần nhất của bạn. Tuỳ bạn nói bạn biết gì mà sẽ bị hỏi liên quan tới những cái bạn biết hehee </p> <blockquote> <p>TIP: Đừng chém gió phần bạn không biết, kẻo bị hỏi thêm là tạch 😉</p> </blockquote> <h3 id="html-css">HTML/CSS</h3> <ul> <li>Layout bằng flexbox, grid.</li> <li>Hỏi về UI library bạn sử dụng: Bootstrap, Material Design, Ant Design.</li> <li>Hỏi về cách bố trí layout.</li> <li>Cho một phần giao diện nào đó, hỏi bạn làm thế nào để ra được như vậy (chỉ trình bày, ko code)</li> <li>Hỏi về cách tổ chức styles trong project.</li> <li>BEM là gì? Apply như thế nào?</li> <li>SCSS: có gì vui với ông này, có những tính năng nào mà bạn đã sử dụng.</li> <li>Specificity: độ cụ thể trong css</li> <li>Làm sao customize được styles của một thư viện UI nào đó.</li> <li>Reset CSS vs Normalize CSS </li> <li>...</li> </ul> <h3 id="javascript">JAVASCRIPT</h3> <ul> <li>&quot;use strict&quot;</li> <li>var, const, let khác nhau ra sao?</li> <li>Block scope với Function scope</li> <li>Hoisting là gì? Cái này có thể bị hỏi dạng cho đoạn code rồi hỏi kết quả và giải thích.</li> <li>Closure</li> <li>Value type vs reference type </li> <li>Bất đồng bộ trong javascript</li> <li>setTimeout(), setInterval()</li> <li>Callback</li> <li>Promise</li> <li>Module trong javascript: import, export, ...</li> <li>ES6: arrow function, for...of, async for...of, async/await, ...</li> <li>Cho các tình huống xử lý javascript, bạn vận dụng kiến thức để cung cấp giải pháp giải quyết nó.</li> <li>...</li> </ul> <h3 id="reactjs">REACTJS</h3> <ul> <li>Component vs PureComponent </li> <li><code>Life cycle</code>: cái nào nên sử dụng cho mục đích nào (cái này mình có share trên kênh Youtube của mình)</li> <li>Phân biệt <code>component state</code>, <code>Context API</code> và <code>Redux</code>: khi nào sử dụng cái nào và lý do.</li> <li><strong>Refs trong reactjs</strong>: bạn có dùng nó chưa và dùng cho việc gì? Hoặc ngược lại cho tình huống xài refs để giải quyết xem bạn có biết hay không ?</li> <li>Routing thì có phần nested routing, nó là gì và khi nào cần nó.</li> <li>Setup routing cho mấy trang cần phải log in như thế nào?</li> <li>Form bạn dùng thư viện nào để quản lý: <code>Formik</code>, <code>Redux-Form</code>, <code>React-Hook-Form</code>. Mỗi cái sẽ có những vấn đề riêng có thể hỏi.</li> <li><code>Auth</code>: bạn handle phần authentication trong app như thế nào? Token, refresh token, expired token? ( nâng cao )</li> <li><code>React hooks</code>: bạn sử dụng hooks nào và cho mục đích gì?</li> <li><code>Custom hook</code>: bạn có tự viết một custom hook nào chưa, nếu có thì nó dùng để làm gì ?</li> <li>Redux thì giờ có <code>Redux Toolkit</code> : nó là gì vậy ta ?</li> <li>Quản lý state bên Facebook đang có thư viện mới là <code>Recoil</code>: bạn có nghe về nó không? bạn thấy thế nào? 🤣</li> <li>Những thư viện bạn hay dùng trong reactjs project.</li> <li>...</li> </ul> <h2 id="2-c-y-thu-t-to-n-gi-i-thu-t">2. Cày thuật toán, giải thuật</h2> <p>Cái này thì đa dạng lắm nên mình không biết sẽ bị hỏi về vấn đề gì nhen. Nên ôn luyện hết cho chắc 😉 Thường người ra đề sẽ cho một bài toán gì đó, mình tự phân tích và sử dụng thuật toán thích hợp để giải nó.</p> <ul> <li>Tìm kiếm, sắp xếp đơn giản.</li> <li>Tìm chuỗi con dài nhất, ngắn nhất và các biến thể của dạng này.</li> <li>Đệ quy.</li> <li>Tìm số bí ẩn trong mảng thoả điều kiện gì đó.</li> <li>Đồ thị (cái này cũng ít bị hỏi)</li> <li>Design pattern (Singleton, Observer, ...)</li> <li>Cho đoạn code, hỏi kết quả và giải thích.</li> <li>Quy hoạch động (cái này hơi nâng cao òi, chắc ít bị hỏi trừ khi công ty làm về thuật toán)</li> <li>... nói chung cái này tuỳ khả năng logic của các bạn đó 😉</li> </ul> <h2 id="3-t-m-hi-u-v-c-ng-ty-m-m-nh-xin-ng-tuy-n">3. Tìm hiểu về công ty mà mình xin ứng tuyển</h2> <p><strong>Tìm hiểu công ty:</strong></p> <ul> <li>Công ty làm lĩnh vực gì?</li> <li>Size bao nhiêu người? </li> <li>Thành lập khi nào?</li> <li>Những dự án công ty đã thực hiện.</li> <li>Reviews về công ty.</li> <li>... </li> </ul> <p><strong>Hỏi về dự án bạn &quot;sẽ&quot; được nhận vào làm</strong></p> <ul> <li>Dự án làm về cái gì?</li> <li>Sử dụng công nghệ gì, techstack có những gì trong đó.</li> <li>Có bao nhiêu người rồi, và bạn sẽ làm việc với ai?</li> <li>Tính của team có vui vẻ, hoà đồng không?</li> <li>... nói chung bạn quan tâm gì về team của bạn sắp làm thì cứ hỏi hen hehee</li> </ul> <hr> <p>Hi vọng bài chia sẻ này hữu ích với mọi người! <br/> Chúc các bạn có một buổi phỏng vấn thành công tốt đẹp nhé! 🎉 <br/></p> <blockquote> <p>From Easy Frontend with ❤️</p> </blockquote>`,
      description:
        "Amet minim mollit non deserunt ullamco est sit aliqua dolor do amet sint. Velit officia consequat duis enim velit mollit. Exercitation veniam consequat sunt nostrud amet.",
    },
  ];
  let user = response.filter((item: any) => {
    return item.slug === postid;
  });
  return { props: { user } };
}
